package singleton;

// 单例模式
// 定义：确保某个类只有一个实例，且自行实例化并向整个系统提供这个实例（如Spring的Bean）
/*
 * 【优点】： 1、仅有一个实例，节省内存，特别是某对象需要频繁创建、销毁，且创建。销毁性能无法优化时。
 * 
 * 2、减少系统性能开销，当产生一个对象需要较多资源时，如读取配置、产生其他依赖对象时，
 * 
 * 可通过在应用启动时直接产生一个单例对象，然后采用永久驻留内存的方式。（注意JVM垃圾回收机制）
 * 
 * 3、避免对资源的多重占用，如写文件动作，由于单例，避免对同一个文件同时写操作；
 * 
 * 4、可在系统设置全局的访问点，优化和共享资源访问。（如：设计单例类，负责所有数据表的映射处理）
 * 
 * 【缺点】：1、单例模式一般无接口，扩展困难，除非改代码。
 * 
 * 为何不增加接口？因为接口对单例模式无意义，它要求自行实例化，且提供单一实例，接口和抽象类是不能被实例化的。（亦有特例）
 *
 * 2、不利于测试。并行开发时，若单例模式没有完成则无法测试。
 * 
 * 3、与单一职责原则冲突，
 * 
 * 【适用场景】：1、要求生成唯一序列号的环境；
 * 
 * 2、整个项目需要一个共享访问点或共享数据，如网站计数器（还需保证线程安全）、size；
 * 
 * 3、创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源；
 * 
 * 4、需要定义大量的静态常量和静态方法（如工具类）的环境，可以采用单例模式（当 然，也可以直接声明为static的方式）。
 * 
 * 
 * 【扩展】 有上限的多例模式：需要产生固定数量对象的模式。
 * 
 * 以在设计时决定在内存中有多少个实例，方便系统进行 扩展，修正单例可能存在的性能问题，提供系统的响应速度。
 * 
 * 例如读取文件，我们可以在系 统启动时完成初始化工作，在内存中启动固定数量的reader实例，然后在需要读取文件时就 可以快速响应。
 */